#!/bin/bash

source_file "${HOME}/.bash_functions_cd"
source_file "${HOME}/.bash_functions_git"
source_file "${HOME}/.bash_functions_mvn"
source_file "${HOME}/.bash_functions_gradle"
source_file "${HOME}/.bash_functions_vagrant"

function bash_prompt() {
  local _N='\[\e[0m\]'    # unsets color to term's fg color
  # Regular Colors
  local _K='\[\e[30m\]'        # Black
  local _R='\[\e[31m\]'          # Red
  local _G='\[\e[32m\]'        # Green
  local _Y='\[\e[33m\]'       # Yellow
  local _B='\[\e[34m\]'         # Blue
  local _M='\[\e[35m\]'       # Purple
  local _C='\[\e[36m\]'         # Cyan
  local _W='\[\e[37m\]'        # White

  # Bold
  local _BB='\[\e[1;30m]'       # Black
  local _BR='\[\e[1;31m]'         # Red
  local _BG='\[\e[1;32m]'       # Green
  local _BY='\[\e[1;33m]'      # Yellow
  local _BB='\[\e[1;34m]'        # Blue
  local _BM='\[\e[1;35m]'      # Purple
  local _BC='\[\e[1;36m]'        # Cyan
  local _BW='\[\e[1;37m]'       # White

  # Underline
  local _UB='\[\e[4;30m\]'       # Black
  local _UR='\[\e[4;31m\]'         # Red
  local _UG='\[\e[4;32m\]'       # Green
  local _UY='\[\e[4;33m\]'      # Yellow
  local _UB='\[\e[4;34m\]'        # Blue
  local _UM='\[\e[4;35m\]'      # Purple
  local _UC='\[\e[4;36m\]'        # Cyan
  local _UW='\[\e[4;37m\]'       # White

  # Background
  local _BGK='\[\e[40m\]'       # Black
  local _BGR='\[\e[41m\]'         # Red
  local _BGG='\[\e[42m\]'       # Green
  local _BGY='\[\e[43m\]'      # Yellow
  local _BGB='\[\e[44m\]'        # Blue
  local _BGM='\[\e[45m\]'      # Purple
  local _BGC='\[\e[46m\]'        # Cyan
  local _BGW='\[\e[47m\]'       # White

  # High Intensty
  local _IK='\[\e[0;90m\]'       # Black
  local _IR='\[\e[0;91m\]'         # Red
  local _IG='\[\e[0;92m\]'       # Green
  local _IY='\[\e[0;93m\]'      # Yellow
  local _IB='\[\e[0;94m\]'        # Blue
  local _IM='\[\e[0;95m\]'      # Purple
  local _IC='\[\e[0;96m\]'        # Cyan
  local _IW='\[\e[0;97m\]'       # White

  # Bold High Intensty
  local _BIK='\[\e[1;90m\]'      # Black
  local _BIR='\[\e[1;91m\]'        # Red
  local _BIG='\[\e[1;92m\]'      # Green
  local _BIY='\[\e[1;93m\]'     # Yellow
  local _BIB='\[\e[1;94m\]'       # Blue
  local _BIM='\[\e[1;95m\]'     # Purple
  local _BIC='\[\e[1;96m\]'       # Cyan
  local _BIW='\[\e[1;97m\]'      # White

  # High Intensty backgrounds
  local _BGIK='\[\e[100m\]'   # Black
  local _BGIR='\[\e[101m\]'     # Red
  local _BGIG='\[\e[102m\]'   # Green
  local _BGIY='\[\e[103m\]'  # Yellow
  local _BGIB='\[\e[104m\]'    # Blue
  local _BGIP='\[\e[105m\]'  # Purple
  local _BGIC='\[\e[106m\]'    # Cyan
  local _BGIW='\[\e[107m\]'   # White

  local _UC=$_Y                # user's color
  [ $UID -eq "0" ] && _UC=$R   # root's color
  local DISPLAY_USER;
  local DISPLAY_HOSTNAME;
  case $TERM in
    cygwin*|xterm*|rxvt*|mintty*|vscode*)
      export TITLEBAR="\[\033]0;${DISPLAY_USER}${DISPLAY_HOSTNAME} \w\007\]"
      ;;
    *)
      export TITLEBAR=""
      ;;
  esac
  source_file "$HOME/.git-prompt.sh"

  # PS1="${TITLEBAR}${BGIK}${UC}${DISPLAY_USER:+${DISPLAY_USER}}${G}${DISPLAY_HOSTNAME:+@${DISPLAY_HOSTNAME}}${Y}\W \$(__git_ps1)${N}>"
  # PS1="\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\$(__git_ps1)\n# "
  # reset pwd newline green username @ hostname yellow pwd gitbranch bgwhite white # black arrow
  local USERNAME_HOST
  [[ -n "$DISPLAY_USER" ]] && [[ -n "$DISPLAY_HOSTNAME" ]] && USERNAME_HOST="${DISPLAY_USER}@${DISPLAY_HOSTNAME}"

  # PS1="\[\e]0;\w\a\]\n${_G}${USERNAME_HOST}${_Y}\w${_N}\$(__git_ps1)\n${_BGW}${_W}#${_N}"
  PS1="\[\e]0;\w\a\]\n${_G}${USERNAME_HOST}${_Y}\w${_N}\$(__git_ps1)\n${_BGW}${_W}#${_N} "

  #PS1="\[${BGIK}\]\[${Y}\]\u\[${N}\]"
    # without colors: PS1="[\u@\h \${NEW_PWD}]\\$ "
    # extra backslash in front of \$ to make bash colorize the prompt
}

function setupdirs () {
  local dirfile=${HOME}/.dircommands
  # grep -vE '^(\s*#|#)' ${dirfile} | while read line
  
  while read -r line
  do
    # echo "line: $line"

    [[ -z "$line" || "$line" =~ ^[[:blank:]]*# ]] && continue
    # echo "filtered"
    # IFS=" " read -r -a parts <<< "$line"
    local alias var dir remainder
    # normalized
    # normalized=$(echo "$line" | awk '{$1=$1; print $1, $2, substr($0, index($0,$3))}')
    # aliaspart=$(echo "$normalized" | cut -d ' ' -f 1)
#     aliaspart=$(echo "$line" | awk '{print $1}' )
    alias="${line%% *}"
    # echo "alias='$alias'"
    remainder="${line#* }"
    # ho "remainder='$remainder'"
    remainder="${remainder#"${remainder%%[![:space:]]*}"}"
    # ho "remainder='$remainder'"
    # varpart=$(echo "$normalized" | cut -d ' ' -f 2)
    # varpart=$(echo "$line" | awk '{print $2}' )
    var="${remainder%% *}"
    # echo "remainder='$remainder'"
    # echo "var='$var'"
    dir="${remainder#* }"
    # echo "dir='$dir'"
    dir="${dir#"${dir%%[![:space:]]*}"}"
    # echo "dir='$dir'"

    # dirpart=$(echo "$normalized" | cut -d ' ' -f 3-)
    # dirpart=$(echo "$line" | awk '{print substr($0, index($0,$3))}' )
    # echo "dirpart=$dirpart"
    # echo "split"
    # echo "aliaspart=${aliaspart}"
    # echo "varpart=${varpart}"
    # echo "dirpart=${dirpart}"
    eval "${var}"="${dir}"
    eval alias "${alias}"=\"cd \'"${dir}"\'\"
    # echo "evaled"
  done < "${dirfile}"
}


function selectmysql () {
  local mycnfdir=~/.mysqlconnections
  local mycnffile=~/.my.cnf
  local mycnfprefix=my.cnf.

  local mycnffiles
  mapfile -t mycnffiles <( find ${mycnfdir} -name "${mycnfprefix}*" -print0 | xargs -0 -n1 basename | cut -c $(( ${#mycnfprefix} +1))- )

  local cnf
  cnf=$(iselect -a -Q cancel "${mycnffiles[@]}")

  case $cnf in
    "cancel")
      # echo "$cnf"
      ;;
    *)
      echo "selection: $cnf"
      rm -f $mycnffile
      ln -s "$mycnfdir/$mycnfprefix$cnf" $mycnffile
      ;;
  esac
}

function setmysql () {
  local mycnfdir=~/.mysqlconnections
  local mycnffile=~/.my.cnf
  local mycnfprefix=my.cnf.

  mapfile -t mycnffiles <(find ${mycnfdir} -name "${mycnfprefix}*" -print0 | xargs -0 -n1 basename | cut -c $(( ${#mycnfprefix} +1))- )

  # local cnf=`iselect -a -Q cancel ${mycnffiles[@]}`
  local cnf=$1

  case $cnf in
    "cancel")
      # echo "$cnf"
      ;;
    *)
      echo "selection: $cnf"
      if [ -e "$mycnfdir/$mycnfprefix$cnf" ]
      then

        rm -f $mycnffile
        ln -s "$mycnfdir/$mycnfprefix$cnf" "$mycnffile"
        echo "configured: $cnf"
      fi
      ;;
  esac
}

function convert_args() {
  local -n converted_args="$1"
  local index
  for index in $(seq 0 ${#converted_args[@]}) ; do
    case "${converted_args[index]}" in
      # do not attempt to convert options
      -*) continue;;
      *)  [ -e "${converted_args[index]}" ] && converted_args[index]="$(cygpath -m "${converted_args[index]}")";;
    esac
  done
}

function bat() {
  local _command
  local _args=("$@")
  if ! _command=$(which batcat 2> /dev/null); then
    if ! _command=$(which bat || which bat.exe); then
      >&2 echo "bat, bat.exe, and batcat not found"
      return 127
    else
      convert_args _args
    fi
  fi
  "${_command}" "${_args[@]}"
}

function chezmoi() {
  local _command
  _command=$(which chezmoi || which chezmoi.exe)
  local _args=("$@")
  convert_args _args
  "$_command" "${_args[@]}"
}

function cm() {
  chezmoi "$@"
}

# borrowed from `chezmoi completion bash``
if [[ $(type -t compopt) = "builtin" ]]; then
    complete -o default -F __start_chezmoi cm
else
    complete -o default -o nospace -F __start_chezmoi cm
fi

function npp() { 
  local _command _args
  _command=$(cygpath -u "C:\Program Files\Notepad++\notepad++.exe")
  _args=("$@")
  convert_args _args
  "${_command}" "${_args[@]}" &> /dev/null
}

function idea() { 
  local _command _args _commands
  _command=$(which idea)
  _args=("$@")
  convert_args _args
  _commands=( setsid "$_command" "${_args[@]}" )
  bash -c "$(printf "'%s' " "${_commands[@]}") &> /dev/null &"
}

function nppgit() { '/proc/cygdrive/c/Program Files/Notepad++/notepad++.exe' -multiInst -nosession -notabbar -noPlugin -n3 "$(cygpath -w "$*")"; }

function selectjdk() {
  local DEV_DIR=/c/dev
  local JAVA_DIR="$DEV_DIR/Java"
  local JDKS JDK_CURRENT JDK_INDEX
  shopt -s nullglob
  JDKS=( "$JAVA_DIR/"*jdk* )
  JDKS=( "${JDKS[@]##*/}" )
  local java_symlink="$JAVA_DIR/home"
  [ -h "$java_symlink" ] && [ -e "$java_symlink" ] && JDK_CURRENT=$(readlink "$java_symlink")
  JDK_INDEX=1
  for i in "${!JDKS[@]}"; do
    if [ "${JDKS[i]}" == "$JDK_CURRENT" ]; then JDK_INDEX=$((i + 1)); break; fi
  done;
  jdk=$(iselect -p $JDK_INDEX -a "${JDKS[@]}" )
  [ -z "$jdk" ] && return 1
  [ ! -h "$java_symlink" ] && [ -e "$java_symlink" ] && (echo "Can't create symlink because file exists: $java_symlink"; return 2; )
  
  [ -e "$java_symlink" ] && rm "$java_symlink"
  [ -e "$java_symlink" ] && (echo "could not delete symlink: $java_symlink"; return 3; )

  ln -s "$jdk" "$java_symlink"
  echo "selected: $jdk"
}

yq() {
  docker run --rm -i -v "${PWD}":/workdir mikefarah/yq "$@"
}

confluent() {
  docker run --rm -it \
    -v "$(cygpath -m "${PWD}")":/workdir \
    -v "$(cygpath -m "${HOME}")/.confluent":/root/.confluent \
    confluentinc/confluent-cli:latest confluent "$@"
}

setupcygwin() {(
  set -e
  EXE=setup-x86_64.exe
  TMPFILE=$(mktemp -d)/${EXE}
  wget https://www.cygwin.com/${EXE} -O "$TMPFILE"
  chmod +x "$TMPFILE"
  start "$(cygpath -w "$TMPFILE")"
  set +e
)}

hg() {
  history | grep "$@"
}
