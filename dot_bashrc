#!/bin/bash
# To the extent possible under law, the author(s) have dedicated all
# copyright and related and neighboring rights to this software to the
# public domain worldwide. This software is distributed without any warranty.
# You should have received a copy of the CC0 Public Domain Dedication along
# with this software.
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.

# base-files version 4.3-3

# ~/.bashrc: executed by bash(1) for interactive shells.

# The latest version as installed by the Cygwin Setup program can
# always be found at /etc/defaults/etc/skel/.bashrc

# Modifying /etc/skel/.bashrc directly will prevent
# setup from updating it.

# The copy in your home directory (~/.bashrc) is yours, please
# feel free to customise it to create a shell
# environment to your liking.  If you feel a change
# would be benifitial to all, please feel free to send
# a patch to the cygwin mailing list.

# User dependent .bashrc file

# If not running interactively, don't do anything
[[ "$-" != *i* ]] && return

# Shell Options
#
# See man bash for more options...
#
# Don't wait for job termination notification
# set -o notify
#
# Don't use ^D to exit
# set -o ignoreeof
#
# Use case-insensitive filename globbing
# shopt -s nocaseglob
#
# Make bash append rather than overwrite the history on disk
shopt -s histappend
#
# When changing directory small typos can be ignored by bash
# for example, cd /vr/lgo/apaache would find /var/log/apache
# shopt -s cdspell
#
# Bash replaces directory names with the results of word
# expansion when performing filename completion
shopt -s direxpand

# Programmable completion enhancements are enabled via
# /etc/profile.d/bash_completion.sh when the package bash_completetion
# is installed.  Any completions you add in ~/.bash_completion are
# sourced last.

# History Options
#
# Don't put duplicate lines in the history.
# export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredupscy
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+:}ignoredups
#
# Ignore some controlling instructions
# HISTIGNORE is a colon-delimited list of patterns which should be excluded.
# The '&' is a special pattern which suppresses duplicate entries.
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit'
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls' # Ignore the ls command as well
export HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls:pwd:which*:whoami:history:hg*' # Ignore the ls:pwd command as well
#
# Whenever displaying the prompt, write the previous line to disk
# export PROMPT_COMMAND="history -a"

function source_file() {
  local file="$1"
  if [ -f "$file" ]; then
    # shellcheck source=/dev/null
    source "$file"
  fi
}
# Aliases
#
# Some people use a different file for aliases
# if [ -f "${HOME}/.bash_aliases" ]; then
#   source "${HOME}/.bash_aliases"
# fi
source_file "${HOME}/.bash_aliases"
#
# Some example alias instructions
# If these are enabled they will be used instead of any instructions
# they may mask.  For example, alias rm='rm -i' will mask the rm
# application.  To override the alias instruction use a \ before, ie
# \rm will call the real rm not the alias.
#
# Interactive operation...
# alias rm='rm -i'
# alias cp='cp -i'
# alias mv='mv -i'
#
# Default to human readable figures
# alias df='df -h'
# alias du='du -h'
#
# Misc :)
# alias less='less -r'                          # raw control characters
# alias whence='type -a'                        # where, of a sort
# alias grep='grep --color'                     # show differences in colour
# alias egrep='egrep --color=auto'              # show differences in colour
# alias fgrep='fgrep --color=auto'              # show differences in colour
#
# Some shortcuts for different directory listings
# alias ls='ls -hF --color=tty'                 # classify files in colour
# alias dir='ls --color=auto --format=vertical'
# alias vdir='ls --color=auto --format=long'
# alias ll='ls -l'                              # long list
# alias la='ls -A'                              # all but . and ..
# alias l='ls -CF'                              #

# Umask
#
# /etc/profile sets 022, removing write perms to group + others.
# Set a more restrictive umask: i.e. no exec perms for others:
# umask 027
# Paranoid: neither group nor others have any perms:
# umask 077

# Functions
#
# Some people use a different file for functions
# if [ -f "${HOME}/.bash_functions" ]; then
#   source "${HOME}/.bash_functions"
# fi
source_file "${HOME}/.bash_functions"
#
# Some example functions:
#
# a) function settitle
# settitle ()
# {
#   echo -ne "\e]2;$@\a\e]1;$@\a";
# }
#
# b) function cd_func
# This function defines a 'cd' replacement function capable of keeping,
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain
# cd_func ()
# {
#   local x2 the_new_dir adir index
#   local -i cnt
#
#   if [[ $1 ==  "--" ]]; then
#     dirs -v
#     return 0
#   fi
#
#   the_new_dir=$1
#   [[ -z $1 ]] && the_new_dir=$HOME
#
#   if [[ ${the_new_dir:0:1} == '-' ]]; then
#     #
#     # Extract dir N from dirs
#     index=${the_new_dir:1}
#     [[ -z $index ]] && index=1
#     adir=$(dirs +$index)
#     [[ -z $adir ]] && return 1
#     the_new_dir=$adir
#   fi
#
#   #
#   # '~' has to be substituted by ${HOME}
#   [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"
#
#   #
#   # Now change to the new dir and add to the top of the stack
#   pushd "${the_new_dir}" > /dev/null
#   [[ $? -ne 0 ]] && return 1
#   the_new_dir=$(pwd)
#
#   #
#   # Trim down everything beyond 11th entry
#   popd -n +11 2>/dev/null 1>/dev/null
#
#   #
#   # Remove any other occurence of this dir, skipping the top of the stack
#   for ((cnt=1; cnt <= 10; cnt++)); do
#     x2=$(dirs +${cnt} 2>/dev/null)
#     [[ $? -ne 0 ]] && return 0
#     [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
#     if [[ "${x2}" == "${the_new_dir}" ]]; then
#       popd -n +$cnt 2>/dev/null 1>/dev/null
#       cnt=cnt-1
#     fi
#   done
#
#   return 0
# }
#
# alias cd=cd_func

WSL_OSTYPE=linux-gnu
CYGWIN_OSTYPE=cygwin
if [[ "$OSTYPE" == "$CYGWIN_OSTYPE" ]]; then
  # echo "Running in Cygwin"
  IS_CYGWIN=true
  IS_WSL2=false
  source_file "${HOME}/.bashrc_cygwin"
# elif grep -qEi "(Microsoft|WSL)" /proc/version &> /dev/null && [ -n "$WSL_INTEROP" ]; then
elif [[ "$OSTYPE" == "$WSL_OSTYPE" ]]; then
  # echo "Running in WSL2"
  IS_CYGWIN=false
  IS_WSL2=true
  source_file "${HOME}/.bashrc_wsl2"
else
  echo "Running unknown environment"
  IS_CYGWIN=false
  IS_WSL2=false
fi

eval "$(dircolors -b ~/.dircolors)"
export LS_OPTIONS="-p --color=auto --group"
export GREP_COLORS='ms=01;32:mc=:sl=:cx=:fn=36:ln=33:bn=32:se=39'
export DISPLAY=${DISPLAY:-":0.0"}

# export BAT_CONFIG_PATH=$(cygpath -w "/home/$USERNAME/.bat/bat.conf")
  #* default: enables recommended style components (default).
  #* full: enables all available components.
  #* auto: same as 'default', unless the output is piped.
  #* plain: disables all available components.
  #* changes: show Git modification markers.
  #* header: alias for 'header-filename'.
  #* header-filename: show filenames before the content.
  #* header-filesize: show file sizes before the content.
  #* grid: vertical/horizontal lines to separate side bar
		  #and the header from the content.
  #* rule: horizontal lines to delimit files.
  #* numbers: show line numbers in the side bar.
  #* snip: draw separation lines between distinct line ranges.
  #* default=changes,grid,header-filename,numbers,snip
  #* full=changes,grid,header-filename,header-filesize,numbers,snip
export BAT_STYLE=grid,header-filename,snip
# [[ "$IS_WSL2" == true ]] && export DIR_C=/mnt/c
setupdirs

if _vagrant_version=$(which vagrant 2> /dev/null && vagrant -v | grep -Po '\d+\.\d+\.\d+'); then
  # shellcheck disable=SC1090
  . "/c/Program Files/Vagrant/embedded/gems/gems/vagrant-${_vagrant_version}/contrib/bash/completion.sh"
fi

function set_starship_windows_title() {
  if branch=$(git branch --show-current 2> /dev/null); then
    title="$branch/$(git rev-parse --show-prefix)"
  else
    title=$PWD
  fi
  echo -ne "\033]0;$title\007"
}
